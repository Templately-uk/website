// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Defined schemea
// Goes here

model Template {
  // Identifiers & references
  id         Int     @id @default(autoincrement())
  route      String  @unique
  userId     String
  accountId  String?
  categoryId Int
  tags       Tag[]

  // Actual template
  title   String
  summary String
  body    String // The actual email template body, storing it as string.

  // AI
  aiTones String

  // Moderation
  rejected   String?
  rejectedBy String?

  // Meta
  views Int @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  account  Account?  @relation(fields: [accountId], references: [id])
  category Category  @relation(fields: [categoryId], references: [id])
  comments Comment[]
  votes    Vote[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  description String

  createdAt DateTime @default(now())

  templates Template[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())

  userId String

  templates Template[]
  user      User       @relation(fields: [userId], references: [id])
}

model Comment {
  // Identifiers & references
  id         Int    @id @default(autoincrement())
  templateId Int
  userId     String

  content String

  // Moderation
  reviewedAt DateTime?
  reviewedBy String?

  createdAt DateTime @default(now())

  template Template @relation(fields: [templateId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Vote {
  id         Int    @id @default(autoincrement())
  templateId Int
  userId     String

  createdAt DateTime @default(now())

  template Template @relation(fields: [templateId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([templateId, userId])
}

// Nextauth schema
// BELOW
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  templates Template[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  templates Template[]
  comments  Comment[]
  tags      Tag[]
  votes     Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
